// DO NOT MODIFY this file, it may be overriden on upgrade. Its only purpuse is
// to document available options and set their default values.
//
// If you want to change any of the following options create a new file (e.g.
// `My.cfg`) in this directory that has the same structure and put the options
// you want to change there.
//
// IF YOU ARE A MODDER do not distribute this file with your mod. Create a new
// file `MyMod.cfg` in this direcotry that has the same structure but only
// containing options you are overriding. Do not put it in other directories as
// it might get processed earlier than this file so your settings will get
// overriden with these defaults.

TextureReplacer
{
  // Dump material/texture name pairs to log when performing general texture
  // replacement pass. Log entries are of the form
  //
  //   [<materialName>] <textureName>
  //
  // This option is intended for texture pack designers.
  logTextures = false

  // Dump full hierarchy (nodes, meshes, textures ...) of Kerbals.
  // This option is intended for mod developers.
  logKerbalHierarchy = false

  // Dump names of all meshes with corresponding shaders on parts with
  // TRReflection part module.
  // This option is intended for part designers.
  logReflectiveMeshes = false

  // Enable toolbar icon that activates GUI for customising Kerbals.
  isGUIEnabled = true

  // Resolution of cube texture faces that is used for real reflections.
  reflectionResolution = 256

  // Once per how many frames one reflection should be updated. At most one
  // reflection per frame is updated for scalability reasons.
  reflectionInterval = 4

  // Reflection colour. Reflection is multiplied by this RGB colour before it is
  // added to the visor colour.
  visorReflectionColour = 1.0 1.0 1.0

  // Map identical textures:
  //
  //   <name> = <target>
  //
  // where `<name>` is the internal texture name and the `<target>` is the
  // destination texture; either a name of an internal texture or a texture's
  // path inside `GameData/`. For example, if you want to have the same texture
  // for all IVA and EVA suits in `Default/` just place `whiteSuite_diffuse` in
  // there and add the following two mappings:
  //
  //   orangeSuite_diffuse   = TextureReplacer/Default/whiteSuite_diffuse
  //   paleBlueSuite_diffuse = TextureReplacer/Default/whiteSuite_diffuse
  //
  // It will have the same effect as having three copies (`whiteSuite_diffuse`,
  // `orangeSuite_diffuse` and `paleBlueSuite_diffuse`) of the same texture in
  // `Default/`.
  //
  // For de-duplicating textures inside `Skins/` and `Suits/` directories, you
  // have to specify the whole texture path as the texture name, for example:
  //
  //   TextureReplacer/Suits/TR/Pilot/kerbalMain     = TextureReplacer/Suits/TR/Pilot/EVAtexture
  //   TextureReplacer/Suits/TR/Pilot/kerbalMainGrey = TextureReplacer/Suits/TR/Pilot/EVAtexture
  //
  // You can also map to internal textures. E.g. if you want the veteran orange
  // suit as the default EVA suit, add the following mapping:
  //
  //    whiteSuite_diffuse = orangeSuite_diffuse
  //
  TextureMap
  {
    whiteSuite_diffuse = orangeSuite_diffuse
  }

  // Custom skins and suits for specific Kerbals. Entries are of the form:
  //
  //   name = skinDir [suitDir]
  //
  // `skinDir` is a subdirectory inside `Skins/` containing skin textures,
  // `DEFAULT.m` (default male), `DEFAULT.f` (default female) or `GENERIC`
  // (unset). `suitDir` is a subdirectory inside `Suits/` containing suit
  // textures, `DEFAULT` (standard suit), `DEFAULT.S` (slim suit), `DEFAULT.V`
  // (vintage suit) or `DEFAULT.F` (future suit), or `GENERIC` (unset). When
  // `suitDir` is missing, `GENERIC` is assumed.
  //
  // Examples:
  //
  //   Huey Kerman    = skin1 suit1
  //   Dewey Kerman   = skin2 DEFAULT
  //   Louie Kerman   = skin3
  //   Donald Kerman  = DEFAULT.m GENERIC
  //   Daisy Kerman   = skin4 DEFAULT.F
  //   Scrooge Kerman = GENERIC DEFAULT.V
  //
  // THESE SETTINGS ARE OVERRIDDEN BY PER-GAME SETTINGS SET IN THE GUI!
  CustomKerbals
  {}

  // Class-specific suits.
  //
  //   className = suitDir
  //
  // where `className` is `Pilot`, `Engineer` or `Scientist` and `suitDir` is a
  // suit directory from `Suits/`, `GENERIC` (= unset), `DEFAULT`, `DEFAULT.S`
  // `DEFAULT.V` or `DEFAULT.F`. Custom experience traits are supported, too.
  // `className` must match `name` property in a `EXPERIENCE_TRAIT`
  // configuration.
  //
  // Examples:
  //
  //   Pilot     = Suit1
  //   Engineer  = DEFAULT.F
  //   Scientist = GENERIC
  //
  // THESE SETTINGS ARE OVERRIDDEN BY PER-GAME SETTINGS SET IN THE GUI!
  ClassSuits
  {}
}
